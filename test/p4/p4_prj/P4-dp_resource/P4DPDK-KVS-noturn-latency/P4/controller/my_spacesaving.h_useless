
#ifndef MY_SPACESAVING
#define MY_SPACESAVING


/****************** s p a c e - s a v i n g ******************/
#define TYPE_HEAD 0 
#define TYPE_END 1
#define TYPE_NODE 2

typedef var_obj uint32_t;
typedef var_freq uint32_t;

struct freqNode{
    var_obj obj;
    struct freqNode* freqNode_prev; 
    struct freqNode* freqNode_next;  
};

struct freqBucket{
    var_freq freq;
    struct freqBucket* freqBucket_prev;
    struct freqBucket* freqBucket_next;
    struct freqNode* freqNode_head; 
    struct freqNode* freqNode_end; 
};

class Space_saving{
private:
    static struct freqBucket** freqBucket_head_arr;
    static struct freqBucket** freqBucket_end_arr;   
    static struct freqBucket* freqBucket_head;
    static struct freqBucket* freqBucket_end;
    static int* freqCount_arr;
public: 
    /*************** basic functions ***************/
    struct freqNode* freqNode_create(struct freqNode* freqNode_prev, struct freqNode* freqNode_next, var_obj obj){
        struct freqNode* freqNode_new = (struct freqNode*)malloc(sizeof(struct freqNode));
        freqNode_new->freqNode_prev = freqNode_prev;
        freqNode_new->freqNode_next = freqNode_next;
        freqNode_new->obj = obj;
        return freqNode_new;
    }
    void freqNode_delete(struct freqNode* freqNode_p, struct freqBucket* freqBucket_p){
        if(freqNode_p->freqNode_next != NULL){
            freqNode_p->freqNode_next->freqNode_prev = freqNode_p->freqNode_prev;
        }else{
            freqBucket_p->freqNode_end = freqNode_p->freqNode_prev;
        }
        if(freqNode_p->freqNode_prev != NULL){
            freqNode_p->freqNode_prev->freqNode_next = freqNode_p->freqNode_next;
        }else{
            freqBucket_p->freqNode_head = freqNode_p->freqNode_next;
        }
        free(freqNode_p);
    }
    void freqNode_insert(struct freqNode* freqNode_p, struct freqBucket* freqBucket_p){
        if(freqNode_p->freqNode_next != NULL){
            freqNode_p->freqNode_next->freqNode_prev = freqNode_p;
        }else{
            freqBucket_p->freqNode_end = freqNode_p;
        }
        if(freqNode_p->freqNode_prev != NULL){
            freqNode_p->freqNode_prev->freqNode_next = freqNode_p;
        }else{
            freqBucket_p->freqNode_head = freqNode_p;
        }
    }
    struct freqBucket* freqBucket_create(struct freqBucket* freqBucket_prev, struct freqBucket* freqBucket_next, var_freq freq){
        struct freqBucket* freqBucket_new = (struct freqBucket*)malloc(sizeof(struct freqBucket));
        freqBucket_new->freq = freq;
        freqBucket_new->freqBucket_prev = freqBucket_prev;
        freqBucket_new->freqBucket_next = freqBucket_next;
        freqBucket_new->freqNode_head = NULL;
        freqBucket_new->freqNode_end = NULL;
        return freqBucket_new;
    }
    void freqBucket_delete(struct freqBucket* freqBucket_p){
        if(freqBucket_p->freqBucket_next != NULL){
            freqBucket_p->freqBucket_next->freqBucket_prev = freqBucket_p->freqBucket_prev;
        }
        if(freqBucket_p->freqBucket_prev != NULL){
            freqBucket_p->freqBucket_prev->freqBucket_next = freqBucket_p->freqBucket_next;
        }
        free(freqBucket_p);
    }
    void freqBucket_insert(struct freqBucket* freqBucket_p){
        if(freqBucket_p->freqBucket_next != NULL){
            freqBucket_p->freqBucket_next->freqBucket_prev = freqBucket_p;
        }
        if(freqBucket_p->freqBucket_prev != NULL){
            freqBucket_p->freqBucket_prev->freqBucket_next = freqBucket_p;
        }
    }
    void freqBucket_prev_check(struct freqBucket* freqBucket_p, struct freqNode* freqNode_p){
        if(freqBucket_p->freqBucket_prev->freq == freqBucket_p->freq + 1){
            struct freqNode* freqNode_new = freqNode_create(NULL, freqBucket_p->freqBucket_prev->freqNode_head, freqNode_p->obj);
            freqNode_insert(freqNode_new, freqBucket_p->freqBucket_prev);
            freqNode_delete(freqNode_p, freqBucket_p);
        }else{
            struct freqBucket* freqBucket_new = freqBucket_create(freqBucket_p->freqBucket_prev, freqBucket_p, freqBucket_p->freq + 1);
            struct freqNode* freqNode_new = freqNode_create(NULL, NULL, freqNode_p->obj);
            freqBucket_insert(freqBucket_new);
            freqNode_insert(freqNode_new, freqBucket_new);
            freqNode_delete(freqNode_p, freqBucket_p);
        }
        if(freqBucket_p->freqNode_head == NULL){
            freqBucket_delete(freqBucket_p);
        }
    }
    /*************** algorithm functions ***************/
	void space_saving_init(uint32_t row_num, uint32_t col_num, uint32_t bucket4col_num){
        freqBucket_head_arr = (struct freqBucket**)malloc(sizeof(struct freqBucket*) * row_num);
        freqBucket_end_arr = (struct freqBucket**)malloc(sizeof(struct freqBucket*) * row_num);
        freqCount_arr = (int*)malloc(sizeof(int*) * row_num);

        for(int i = 0; i < row; i++){
            freqBucket_head = (struct freqBucket*)malloc(sizeof(struct freqBucket));
            freqBucket_end = (struct freqBucket*)malloc(sizeof(struct freqBucket));
            freqBucket_head->freq = 0;
            freqBucket_head->freqBucket_prev = NULL;
            freqBucket_head->freqBucket_next = freqBucket_end;
            freqBucket_head->freqNode_head = NULL;
            freqBucket_end->freq = 0;
            freqBucket_end->freqBucket_prev = freqBucket_head;
            freqBucket_end->freqBucket_next = NULL;
            freqBucket_end->freqNode_head = NULL;
            freqBucket_head_arr[i] = freqBucket_head;
            freqBucket_end_arr[i] = freqBucket_end;
            freqCount_arr[i] = 0;
        }
	}
	uint8_t space_saving_update(uint32_t hash_index, uint32_t key){
        uint8_t col_change_flag = 0; 

        int row_index = hash_index;
        freqBucket_head = freqBucket_head_arr[row_index];
        freqBucket_end = freqBucket_end_arr[row_index];

        int hitFlag = 0;
        int startFlag_bucket = 1;
        struct freqBucket* freqBucket_next = NULL;
        struct freqBucket* freqBucket_p = NULL;
        freqBucket_p = freqBucket_head;

        do{
            if(startFlag_bucket == 1){
                freqBucket_next = freqBucket_p->freqBucket_next;
                startFlag_bucket = 0;
            }else{
                int startFlag = 1;
                struct freqNode* freqNode_next = NULL;
                struct freqNode* freqNode_p = NULL;
                freqBucket_p = freqBucket_next;
                freqBucket_next = freqBucket_p->freqBucket_next;
                do{
                    if(startFlag == 1){
                        freqNode_p = freqBucket_p->freqNode_head;
                        freqNode_next = freqNode_p->freqNode_next;
                        startFlag = 0;
                    }else{
                        freqNode_p = freqNode_next;
                        freqNode_next = freqNode_p->freqNode_next;
                    }
                    if(freqNode_p->obj == obj){
                        freqBucket_prev_check(freqBucket_p, freqNode_p);
                        hitFlag = 1;
                    }
                }while(freqNode_next != NULL);
            }
        }while(freqBucket_next->freqBucket_next != NULL);
        if(hitFlag == 0){
            if(freqBucket_end->freqBucket_prev->freq == 1){
                struct freqNode* freqNode_new = freqNode_create(NULL, freqBucket_end->freqBucket_prev->freqNode_head, obj);
                freqNode_insert(freqNode_new, freqBucket_end->freqBucket_prev);
                if(freqCount_arr[row_index] < size){
                    freqCount_arr[row_index]++;
                }else{
                    freqNode_delete(freqBucket_end->freqBucket_prev->freqNode_end, freqBucket_end->freqBucket_prev);
                }
            }else{
                struct freqBucket* freqBucket_new = freqBucket_create(freqBucket_end->freqBucket_prev, freqBucket_end, 1);
                freqBucket_insert(freqBucket_new);
                struct freqNode* freqNode_new = freqNode_create(NULL, NULL, obj);
                freqNode_insert(freqNode_new, freqBucket_new);
                freqCount_arr[row_index]++;
            }
        }

    }
	uint32_t space_saving_getcol(uint32_t hash_index, uint32_t col_idx){}
}